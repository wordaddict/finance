generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String?
  name            String?
  role            Role             @default(LEADER)
  status          UserStatus       @default(ACTIVE)
  campus          Campus
  emailVerifiedAt DateTime?
  zelle           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  approvals       Approval[]
  requests        ExpenseRequest[] @relation("RequestUser")
  sessions        Session[]
  statusEvents    StatusEvent[]
  itemApprovals   ExpenseItemApproval[] @relation("ItemApprover")
  pastorRemarks  PastorRemark[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  purpose   String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}

model ExpenseRequest {
  id            String        @id @default(uuid())
  title         String
  amountCents   Int
  team          String
  requesterId   String
  description   String?
  category      String
  urgency       Int
  notes         String?
  status        Status        @default(SUBMITTED)
  paidAt        DateTime?
  eventDate     DateTime?
  reportRequired Boolean      @default(true) // Whether an expense report is required for this expense
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  campus        Campus
  approvals     Approval[]
  attachments   Attachment[]
  items         ExpenseItem[]
  requester     User          @relation("RequestUser", fields: [requesterId], references: [id])
  statusHistory StatusEvent[]
  reports       ExpenseReport[]
  pastorRemarks PastorRemark[]
}

model ExpenseItem {
  id            String        @id @default(uuid())
  expenseId     String
  description   String
  amountCents   Int
  quantity      Int           @default(1)
  unitPriceCents Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  expense       ExpenseRequest @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  approvals     ExpenseItemApproval[]
}

model ExpenseItemApproval {
  id                String      @id @default(uuid())
  itemId            String
  approverId        String
  status            String      // APPROVED, DENIED, PENDING
  approvedAmountCents Int?      // Amount approved (null for DENIED, full amount for full approval)
  comment           String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  item              ExpenseItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  approver          User        @relation("ItemApprover", fields: [approverId], references: [id])

  @@unique([itemId, approverId])
}

model StatusEvent {
  id        String         @id @default(uuid())
  expenseId String
  from      Status?
  to        Status
  actorId   String?
  reason    String?
  createdAt DateTime       @default(now())
  actor     User?          @relation(fields: [actorId], references: [id])
  expense   ExpenseRequest @relation(fields: [expenseId], references: [id])
}

model Approval {
  id         String         @id @default(uuid())
  expenseId  String
  stage      Int
  approverId String
  decision   String?
  comment    String?
  decidedAt  DateTime?
  approver   User           @relation(fields: [approverId], references: [id])
  expense    ExpenseRequest @relation(fields: [expenseId], references: [id])

  @@unique([expenseId, stage])
}

model PastorRemark {
  id        String         @id @default(uuid())
  expenseId String
  pastorId  String
  remark    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  expense   ExpenseRequest @relation(fields: [expenseId], references: [id])
  pastor    User           @relation(fields: [pastorId], references: [id])

  @@unique([expenseId, pastorId])
}

model Attachment {
  id        String         @id @default(uuid())
  expenseId String
  publicId  String
  secureUrl String
  mimeType  String
  createdAt DateTime       @default(now())
  expense   ExpenseRequest @relation(fields: [expenseId], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  expenseId String?
  userId    String
  kind      String
  channel   String
  payload   Json
  sentAt    DateTime?
  status    String
  error     String?
  createdAt DateTime  @default(now())
}

model Setting {
  id              Int     @id @default(1)
  requireTwoStage Boolean @default(false)
  reminderHours   Int     @default(48)
}

enum Role {
  ADMIN
  CAMPUS_PASTOR
  LEADER
}

enum UserStatus {
  ACTIVE
  PENDING_APPROVAL
  SUSPENDED
}

enum Status {
  SUBMITTED
  APPROVED
  DENIED
  PARTIALLY_APPROVED
  CHANGE_REQUESTED
  PAID
}

enum Campus {
  DMV
  DALLAS
  BOSTON
  AUSTIN
  CCI_USA_NASHVILLE
  CCI_USA_OKLAHOMA
  CCI_USA_NEWYORK_NEWJERSEY
  CCI_USA_KNOXVILLE
  CCI_USA_NORTH_CAROLINA
  CCI_USA_ATLANTA
  CCI_USA_BAY_AREA
  CCI_USA_CHICAGO
}

model ExpenseReport {
  id            String        @id @default(uuid())
  expenseId     String
  title         String
  content       String
  reportDate    DateTime      @default(now())
  totalApprovedAmount Int?    // Store the total approved amount for this report
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  expense       ExpenseRequest @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  attachments   ReportAttachment[]
  approvedItems ApprovedReportItem[]
}

model ReportAttachment {
  id        String        @id @default(uuid())
  reportId  String
  publicId  String
  secureUrl String
  mimeType  String
  createdAt DateTime      @default(now())

  report    ExpenseReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ApprovedReportItem {
  id                  String        @id @default(uuid())
  reportId            String
  originalItemId      String        // Reference to the original ExpenseItem
  description         String
  approvedAmountCents Int
  createdAt           DateTime      @default(now())

  report              ExpenseReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
}
